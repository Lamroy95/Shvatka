from aiogram import F
from aiogram_dialog import Dialog, Window
from aiogram_dialog.widgets.kbd import Button, SwitchTo, Cancel
from aiogram_dialog.widgets.text import Const, Format, Jinja, Multi

from tgbot.states import OrgSpy
from .getters import get_org, get_spy
from .handlers import keys_handler

game_spy = Dialog(
    Window(
        Multi(
            Jinja(
                "–®–ø–∏–æ–Ω –∏–≥—Ä—ã <b>{{game.name}}</b> —Å ID {{game.id}}\n"
                "–¢–µ–∫—É—â–∏–π —Å—Ç–∞—Ç—É—Å: <b>{{game.status}}</b>\n"
                "–î–∞—Ç–∞ –∏ –≤—Ä–µ–º—è –Ω–∞—á–∞–ª–∞: "
            ),
            Jinja("{{ game.start_at|user_timezone }}", when=F["game"].start_at),
            Format("–Ω–µ –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∞", when=~F["game"].start_at),
            sep="",
        ),
        Cancel(Const("‚§¥–ù–∞–∑–∞–¥")),
        SwitchTo(
            Const("üìä–¢–µ–∫—É—â–∏–µ —É—Ä–æ–≤–Ω–∏"),
            id="spy_levels",
            state=OrgSpy.spy,
            when=F["org"].can_spy & F["game"].is_started,
        ),
        Button(
            Const("üîë–õ–æ–≥ –∫–ª—é—á–µ–π"),
            id="spy_keys",
            on_click=keys_handler,
            when=F["game"].is_started & F["org"].can_see_log_keys,
        ),
        state=OrgSpy.main,
        getter=get_org,
    ),
    Window(
        Const("–ê–∫—Ç—É–∞–ª—å–Ω—ã–µ —Å–≤–µ–¥–µ–Ω–∏—è —Å –ø–æ–ª–µ–π —Å—Ö–≤–∞—Ç–∫–∏:"),
        Jinja(
            "{% for lt in stat %}"
            "{% if lt.is_finished %}"
            "<b>{{ lt.team.name }}</b> - —Ñ–∏–Ω–∏—à–∏—Ä–æ–≤–∞–ª–∞ –≤ "
            "{% else %}"
            "<b>{{ lt.team.name }}</b> - —É—Ä–æ–≤–µ–Ω—å {{ lt.level_number + 1 }} –Ω–∞—á–∞—Ç "
            "{% endif %}"
            "{{ lt.start_at|user_timezone }}"
            "{% endfor %}",
            when=F["org"].can_spy,
        ),
        Button(Const("–æ–±–Ω–æ–≤–∏—Ç—å"), id="refresh_spy"),
        SwitchTo(Const("–ù–∞–∑–∞–¥"), id="back", state=OrgSpy.main),
        state=OrgSpy.spy,
        getter=(get_spy, get_org),
    ),
)
